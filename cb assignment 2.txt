0-1 Knapsack


#include <bits/stdc++.h>
#define ll long long

int t[1000][1000];

using namespace std;

int knapsack(int *wt, int *pr, int w, int n)
{
    if (w == 0 || n == 0)
    {
        return 0;
    }
    if (t[w][n] != -1)
    {
        return t[w][n];
    }

    if (wt[n - 1] <= w)
    {
        return t[w][n] = max(pr[n - 1] + knapsack(wt, pr, w - wt[n - 1], n - 1), knapsack(wt, pr, w, n - 1));
    }
    return t[w][n] = knapsack(wt, pr, w, n - 1);
}

int main()
{
	int n;
	cin >> n;
	int w;
	cin >> w;
    memset(t, -1, sizeof(t));
    int wt[n];
	for(int i = 0; i < n; i++)
	{
		cin >> wt[i];
	}
    int pr[n];
	for(int i = 0; i < n; i++)
	{
		cin >> pr[i];
	}
    cout << knapsack(wt, pr, w, n);
    return 0;
}




LCS with 3 Strings


import java.util.*;

public class Main
{
public static void main(String[] args) {
Scanner kb = new Scanner(System.in);
String s1 = kb.next();
String s2 = kb.next();
String s3 = kb.next();
 int[][][] dp = new int[200][200][200];
	 for (int i = 0; i < 200; i++)
        {
            for (int j = 0; j < 200; j++)
            {
                for (int k = 0; k < 200; k++)
                {
                    dp[i][j][k] = -1;
                }
            }
        }
	
System.out.println(lcslen(s1,s2,s3,s1.length(),s2.length(),s3.length(),dp));



}
public static int lcslen(String s1, String s2,String s3 ,int m , int n,int p,int dp[][][]){
  if(m==0 || n==0 || p==0){
    return 0;
  }
  if(dp[m][n][p] != -1){
    return dp[m][n][p];
  }
  if( s1.charAt(m-1)==s2.charAt(n-1) && s2.charAt(n-1)==s3.charAt(p-1)){
   
    return dp[m][n][p] = 1 + lcslen(s1,s2,s3,m-1,n-1,p-1,dp);
  
  }
  else{
  return dp[m][n][p] = Math.max( Math.max(lcslen(s1,s2,s3,m-1,n,p,dp),lcslen(s1,s2,s3,m,n-1,p,dp)) ,lcslen(s1,s2,s3,m,n,p-1,dp) );
  }
  
   
}
}






Climbing Stairs


import java.util.*;

class Main{
  public static void main (String[] args) {
    
    Scanner kb =new Scanner(System.in);
    int n = kb.nextInt();
    int dp[] = new int[100];
   for(int i=0;i<100;i++){
     dp[i] = -1;
   }
    System.out.println(ClimbStairs(n,dp));
    
  }
  public static int ClimbStairs(int n,int dp[]){
    if(n<0){
      return 0;
    }
    if(n==0){
      return 1;
    }
    if(dp[n] !=-1){
      return dp[n];
    }
    else{
    return dp[n] = ClimbStairs(n-1,dp) + ClimbStairs(n-2,dp);
    }
  }
}




Length of LCS



import java.util.*;

public class Main
{
public static void main(String[] args) {
Scanner kb = new Scanner(System.in);
String s1 = kb.next();
String s2 = kb.next();
 int[][] dp = new int[s1.length() + 1][s2.length() + 1];
		for(int[] row : dp) {
			Arrays.fill(row, -1);
		}
System.out.println(lcslen(s1,s2,s1.length(),s2.length(),dp));

}
public static int max(int a, int b)
{
    return (a > b)? a : b;
}
public static int lcslen(String s1, String s2,int m , int n,int dp[][]){
  if(m==0 || n==0){
    return 0;
  }
  if(dp[m][n] != -1){
    return dp[m][n];
  }
  if(s1.charAt(m-1)==s2.charAt(n-1)){
    return dp[m][n] = 1 + lcslen(s1,s2,m-1,n-1,dp);
  }
  return dp[m][n] = max( lcslen(s1,s2,m-1,n,dp),lcslen(s1,s2,m,n-1,dp) );
   
   
}
}



Coin Change

import java.util.*;
public class Main {
	private static int sol(int[] coins, int curr, int amt, int[][] dp) {

		if(amt == 0) {
			return 1;
		}
		
		if(curr == coins.length) {
			return 0;
		}
		
		if(dp[curr][amt] != -1) {
			return dp[curr][amt];
		}
		int pick = 0; 
		if(coins[curr] <= amt) {
			pick = sol(coins, curr, amt - coins[curr], dp);
		}
		
		int dontPick = sol(coins, curr + 1, amt, dp);
		return dp[curr][amt] = pick + dontPick;
	}
    public static void main(String args[]) {
     
		Scanner sc=new Scanner(System.in);
		int amt=sc.nextInt();
		int n=sc.nextInt();
		int[] coins=new int[n];
		for(int i=0;i<n;i++){
			coins[i]=sc.nextInt();
		}
	
		int[][] dp = new int[n + 1][amt + 1]; 
		for(int[] row : dp) {
			Arrays.fill(row, -1);
		}
		
		System.out.println(sol(coins, 0, amt, dp));
    }
}



0-N Knapsack

import java.util.*;

public class Main {
    public static void main(String[] args) {
      Scanner kb = new Scanner(System.in);
      int n = kb.nextInt();
      int cap = kb.nextInt();
      int wt[] = new int[n];
      int val[] = new int[n];
      for(int i=0;i<wt.length;i++){
        wt[i] = kb.nextInt();
      }
      for(int i=0;i<val.length;i++){
        val[i] = kb.nextInt();
      }
      int dp[][] = new int[n+1][cap+1];
      for(int[] row : dp){
        Arrays.fill(row,-1);
      }
      System.out.println(knapsack(wt, val,n,cap,dp));
       
    }
    public static int knapsack(int wt[],int val[],int n,int cap,int dp[][]){
        if(n==0 || cap==0 ){
          return 0;
        }
        if(dp[n][cap] != -1){
          return dp[n][cap];
        }
        if(wt[n-1] > cap){
          return dp[n][cap] = knapsack(wt,val,n-1,cap,dp);
        }
        return dp[n][cap] = Math.max( val[n-1] + knapsack(wt,val,n,cap-wt[n-1],dp),knapsack(wt,val,n-1,cap,dp));
    }
}





CodeWars 2.0 - Edit Distance


import java.util.*;
public class Main {
    public static void main (String args[]) {
		Scanner scanner = new Scanner(System.in);
		String s = scanner.next();
		String t = scanner.next();
		int m = s.length();
		int n = t.length();
		int[][] dp = new int[m+1][n+1];
		for(int i = 0;i<m+1;i++){
			dp[i][0] = i;
		}
            
        for(int j = 0;j<n+1;j++){
			dp[0][j] = j;
		}
            
		for(int i = 1;i<m+1;i++){
            for(int j = 1;j<n+1;j++){
                if(s.charAt(i-1)==t.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1];
				}
                else{
                    dp[i][j] = Math.min(Math.min(dp[i-1][j],dp[i][j-1]),dp[i-1][j-1])+1;
				}
			}
		}
		System.out.println(dp[m][n]);
    }
}




Paul And Railway Track


import java.util.*;
public class Main {
    public static void main (String args[]) {
        Scanner scanner=new Scanner(System.in);
        int n=scanner.nextInt();
        int m=scanner.nextInt();
        int[] s=new int[n];
        for(int i=0;i<n;i++){
            s[i]=scanner.nextInt();
        }
        
        
        int[] t=new int[m];
        for(int j=0;j<m;j++){
            t[j]=scanner.nextInt();
        }
        int[][] dp = new int[n+1][m+1];
		for(int[] row : dp) {
			Arrays.fill(row, -1);
		}
		System.out.println(sol(s, t, 0, 0, dp));
    }

    private static int sol(int[] s, int[] t, int currS, int currT, int[][] dp) {
			if(currS == s.length || currT == t.length) {
				return 0;
			}
			
			if(dp[currS][currT] != -1) {
				return dp[currS][currT];
			}
			if(s[currS] == t[currT]) {
				return dp[currS][currT] =  sol(s, t, currS + 1, currT + 1, dp)+1;
			} else {
				int c1 = sol(s, t, currS, currT + 1, dp);
				int c2 = sol(s, t, currS + 1, currT, dp);
				
				return dp[currS][currT] = Math.max(c1,c2);
			}
		}
}




Count of different ways to express N as the sum of 1, 3 and 4



import java.util.*;
public class Main {
	    public static void main (String args[]) {
		Scanner scanner=new Scanner(System.in);
		int n=scanner.nextInt();
		long[] dp=new long[n+1];
		Arrays.fill(dp,-1);
		System.out.println(sol(n,dp));
    }

	public static long sol(int n, long[] dp){
		if(n==0 || n==1 || n==2){
			return 1;
		}
		if(n==3){
			return 2;
		}
		if(dp[n]!=-1){
			return dp[n];
		}
		long c1=sol(n-1,dp);
		long c2=sol(n-3,dp);
		long c3=sol(n-4,dp);
		return dp[n]=c1+c2+c3;
	}
}





Minimum Path Sum

import java.util.*;
public class Main {
    public static void main (String args[]) {
        Scanner scanner=new Scanner(System.in);
        int row = scanner.nextInt();
        int col = scanner.nextInt();
        int[][] grid=new int[row][col];
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                grid[i][j]=scanner.nextInt();
            }
        }
        int[][] dp = new int[row+1][col+1];
        for (int[] i: dp)
            Arrays.fill(i, -1);
        System.out.println(solve(grid,0,0,row-1,col-1,dp));

    }

    public static int solve(int[][] grid,int cr,int cc,int dr,int dc,int[][] dp){
        if(cr==dr && cc==dc){
            return grid[cr][cc];
        }
        if(cr>dr || cc>dc){
            return Integer.MAX_VALUE;
        }
        if(dp[cr][cc]!=-1){
            return dp[cr][cc];
        }
        int c1 = solve(grid,cr,cc+1,dr,dc,dp);
        int c2 = solve(grid,cr+1,cc,dr,dc,dp);
        return dp[cr][cc] = Math.min(c1,c2)+grid[cr][cc];
    }
}



GOLDMINE PROBLEM


import java.util.*;
public class Main {
	public static void main (String args[]) {
		Scanner scanner = new Scanner(System.in);
		int t = scanner.nextInt();
		for(int i=0;i<t;i++){
			int n = scanner.nextInt();
			int m = scanner.nextInt();
			int[][] arr = new int[n][m];
			int res = -1;
			for(int j=0;j<n;j++){
				for(int k=0;k<m;k++){
					arr[j][k] = scanner.nextInt();
				}
			}
			int[][] dp = new int[n+1][m+1];
			for(int r[]: dp){
				Arrays.fill(r,-1);
			}
			for(int q=0;q<n;q++){
				int resR = goldmineProb(arr,m,n,q,0,dp);
				res = Math.max(res,resR);
			}

			System.out.println(res);
		}
	}
	public static int goldmineProb(int[][] arr, int m, int n, int cr, int cc, int[][] dp){
		if(cr<0 || cr == n || cc == m){
			return 0;
		}
		if(dp[cr][cc] != -1){
			return dp[cr][cc];
		}
		int c =  goldmineProb(arr,m,n,cr-1,cc+1,dp);
		int b = goldmineProb(arr,m,n,cr,cc+1,dp);
		int a =  goldmineProb(arr,m,n,cr+1,cc+1,dp);
		
		

		return dp[cr][cc] = arr[cr][cc] + Math.max(a,Math.max(b,c));
	}
}




Boardpath(Count , Print)



import java.util.*;
public class Main {
	    public static void main(String args[]) {
        Scanner scanner = new Scanner(System.in);
		int n = scanner.nextInt();
		int m = scanner.nextInt();
		Path(n,m,0,"");
		System.out.println();

		System.out.println(count);

    }

	static int count = 0;
	public static void Path(int n, int m,int c,String res){
		if(c==n){
			System.out.print(res+" ");
			count++;
			return;
		}
		if(c>n){
			return;
		}
		
		for(int i=1;i<=m;i++){
			Path(n,m,c+i,res+i);
		}
	}
}



Tilling Problem - I



import java.util.*;
public class Main {
	    public static void main (String args[]) {
		Scanner scanner=new Scanner(System.in);
		int n=scanner.nextInt();
		long[] dp=new long[n+1];
		Arrays.fill(dp,-1);
		System.out.println(sol(n,dp)); 
    }

	public static long sol(int n,long[] dp){
		if(n==0){
			return 0;
		}
		if(n==1 ||n==2){
			return n;
		}
		if(dp[n]!=-1){
			return dp[n];
		}
		long c1=sol(n-1,dp);
		long c2=sol(n-2,dp);
		return dp[n]=c1+c2;
	}
}




Smart Robber

import java.util.*;
public class Main {
    private static int maxP(int[] nums, int curr, int n, int[] cache) {

        if(curr >= n) {
            return 0;
        }
        
        if(cache[curr] != -1) {
            return cache[curr];
        }
        int rob = nums[curr] + maxP(nums, curr + 2, n, cache);
        int dontRob = maxP(nums, curr + 1, n, cache);
        
        return cache[curr] = Math.max(rob, dontRob);
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- != 0){
            int n = sc.nextInt();
            int[] nums = new int[n];
            for (int i = 0; i < n; i++){
                nums[i] = sc.nextInt();
            }       
            int[] cache = new int[n + 1];

            Arrays.fill(cache, -1);
            System.out.println(maxP(nums, 0, n, cache));
        
        }
    }
}



Min Cost Climbing Stairs


import java.util.*;
public class Main {
    static int minimumCost(int[] cost, int n){
        int dp[] = new int[n];

        if (n == 1)
            return cost[0];
        
        dp[0] = cost[0];
        dp[1] = cost[1];

        for (int i = 2; i < n; i++){
            dp[i] = Math.min(dp[i - 1], dp[i - 2]) + cost[i];
        }
        return Math.min(dp[n - 2], dp[n - 1]);
    }
    public static void main (String args[]) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        int[] arr = new int[n];
        for(int i = 0; i < n; i++){
            arr[i] = sc.nextInt();
        }
        System.out.println(minimumCost(arr, n));
    }
}


Count Number of Binary Strings


import java.util.*;
public class Main {
    public static long countStrings(long n)
    {
        if(n < 1)
            return 0;
        long C0 = 1;
        long C1 = 1;
         
        for(int i=1; i<n; i++)
        {
            long temp = C1;
            C1 = C0;
            C0 = C0 + temp;
        }
         
        return C0 + C1;
    }
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- != 0){
            long n = sc.nextLong();
            System.out.println(countStrings(n));
        }
    }
}



K-Ordered LCS


import java.util.*;
public class Main {
	public static void main(String args[]) {
		Scanner scanner = new Scanner(System.in);
		int n = scanner.nextInt();
		int m = scanner.nextInt();
		int k = scanner.nextInt();
		int[] seq1 = new int[n];
		int[] seq2 = new int[m];
		for(int i=0;i<n;i++){
			seq1[i] = scanner.nextInt();
		}
		for(int j=0;j<m;j++){
			seq2[j] = scanner.nextInt();
		}
		int[][][] dp = new int[n+1][m+1][k+1];
		for(int[][] arr: dp){
			for(int[] arr1: arr){
				Arrays.fill(arr1,-1);
			}
		}
		System.out.println(kOrderLCS(seq1,seq2,n,m,k,dp));

    }

	public static int kOrderLCS(int[] seq1, int[] seq2, int n, int m, int k, int[][][] dp ){
		if(k<0){
			return Integer.MIN_VALUE;
		}
		if(n<=0 || m<=0){
			return 0;
		}
		if(dp[n][m][k] != -1){
			return dp[n][m][k];
		}

		int ans = Math.max(kOrderLCS(seq1, seq2, n-1, m,k,dp), kOrderLCS(seq1, seq2, n, m-1, k,dp));
		if(seq1[n-1] == seq2[m-1]){
			ans = Math.max(ans, 1+ kOrderLCS(seq1,seq2,n-1,m-1,k,dp));
		}
		ans = Math.max(ans, 1+ kOrderLCS(seq1,seq2,n-1,m-1,k-1,dp));
		return dp[n][m][k] =  ans;

	}
}



Tilling Problem - II


#include <bits/stdc++.h>
using namespace std;

bool ib = ios_base::sync_with_stdio(0);
bool it = cin.tie(0);
#define int long long
const int MOD = 1e9 + 7;

int countWays(int n, int m, vector<int> &dp)
{
    if (n < m)
        return 1;
    if (dp[n] != -1)
        return dp[n];
    return dp[n] = (((countWays(n - 1, m, dp) % MOD) + (countWays(n - m, m, dp) % MOD)) % MOD);
}

signed main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n, m;
        cin >> n >> m;
        vector<int> past(n + 1, -1);
        cout << countWays(n, m, past) << '\n';
    }
    return 0;
}





Valentine Magic


#include <bits/stdc++.h>
using namespace std;
#define MAX 50000000000
#define ll long long int
ll dp[5005][5005];
ll valentine(vector<ll> &choc,vector<ll> &candy,ll i,ll j){
    if(i == choc.size()){
        return 0 ;
    }
    if(j == candy.size()){
        return MAX;
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    ll diff = abs(choc[i] - candy[j]) ;
    ll q1 = valentine(choc,candy,i+1,j+1) + diff;     // Pair ith boy with jth girl
    ll q2 = valentine(choc,candy,i,j+1) ;                  
    dp[i][j] = min(q1,q2);
    return dp[i][j]; 
}
int main() {
    ll n ; //No of boys
    ll m ; //No of girls
    cin >> n >> m;
    vector<ll> choc;
    vector<ll> candy;
    for(ll i=0;i<n;i++){
        ll x;
        cin >> x;
        choc.push_back(x);
    }
    for(ll i=0;i<m;i++){
        ll x;
        cin >> x;
        candy.push_back(x);
    }
    memset(dp,-1,sizeof(dp));
    sort(choc.begin(),choc.end());
    sort(candy.begin(),candy.end());
    cout << valentine(choc,candy,0,0) ;
    return 0;
}




